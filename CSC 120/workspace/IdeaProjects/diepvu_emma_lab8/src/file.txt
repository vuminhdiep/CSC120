Bubble sort
Double input size:
25 items: 672.0
50 items: 1381.8600000000001
100 items: 2712.1600000000003
200 items: 7137.920000000001
400 items: 14327.7
800 items: 27681.3
1600 items: 45958.119999999995
3200 items: 129475.12000000002
6400 items: 487829.52
12800 items: 1842548.1600000001
25600 items: 7256235.7
51200 items: crash

Quadruple input size:
30 items: 827.0799999999999
120 items: 3508.56
480 items: 18457.359999999997
1920 items: 61831.92
7680 items: 707527.6799999999
30720 items: crash

Insertion sort
Double input size:
25 items: 765.36
50 items: 1182.98
100 items: 1990.72
200 items: 4894.9400000000005
400 items: 13357.9
800 items: 27357.940000000002
1600 items: 39733.92
3200 items: 85339.98000000001
6400 items: 311134.51999999996
12800 items: 1011491.46
25600 items: 3932012.7599999993
51200 items: crash

Quadruple input size:
30 items: 770.6200000000001
120 items: 3004.12
480 items: 16634.879999999997
1920 items: 62622.719999999994
7680 items: 377926.94
30720 items: 5799310.9
122880 items: crash

Quick sort
Double input size:
25 items: 308.6
50 items: 481.7799999999999
100 items: 803.78
200 items: 2331.8799999999997
400 items: 3099.2799999999997
800 items: 3788.5799999999995
1600 items: 4940.26
3200 items: 11336.380000000001
6400 items: 18686.86
12800 items: 34776.32
25600 items: 110947.51999999999
51200 items: 295987.55999999994
102400 items: 1073219.04
204800 items: 3947101.8
409600 items: crash

Quadruple input size:
30 items: 291.12
120 items: 1359.3
480 items: 2384.0
1920 items: 5865.64
7680 items: 29439.3
30720 items: 123748.23999999999
122880 items: 1577972.2399999998
491520 items: crash

Merge sort
Double input size:
25 items: 1226.9599999999998
50 items: 1981.48
100 items: 4008.46
200 items: 6732.759999999999
400 items: 17342.62
800 items: 17194.28
1600 items: 41714.08
3200 items: 148566.36000000002
6400 items: 491624.1
12800 items: 1383935.4200000002
25600 items: 4927896.56
51200 items: crash

Quadruple input size:
30 items: 1690.7
120 items: 3909.3
480 items: 12297.359999999999
1920 items: 54515.380000000005
7680 items: 588756.4600000001
30720 items: 6650438.680000001
122880 items: crash



Note: We see that bubble sort is the lowest sort, and the running time increases rapidly the most as the input size increases.
Coming after bubble sort is insertion sort, with running time is significantly lower than bubble sort given same input size
(7680 items: 707527.6799999999 in bubble sort and 377926.94 in insertion sort, nearly twice faster). The merge sort comes
after insertion sort, and the growing pace of running time is roughly the same as insertion sort. The quick sort is the
most efficient since there is not much difference between running times when increasing input size (almost as if it's linear)
The trend of bubble sort is when the input size doubles, the running time quadruples, when the input size quadruples,
the running time times 16. The same as insertion sort
The trend of quick sort is when the input size doubles, the running time roughly times .6, when the input size quadruples,
the running time times roughly 2.4. The same as merge sort.
So the efficiency of the sorter in order from least to most: bubble sort < insertion sort < merge sort < quick sort

Side note: In insertion sort, The worst case occurs when the array is sorted in reverse order.
Insertion sort has an average and worst-case running time of O(n**2).
Quick sort has best and average running time are O(n*log(n)).
Quick sort's worst case is O(n**2), when quick sort has the most unbalanced partitions possible
(pivot is the largest or smallest value in the array)
Quick sort's best case occurs when the partitions are as evenly balanced as possible:
their sizes either are equal or are within 1 of each other (pivot is in the middle of the array)
Merge sort has best, average and worst running time are all O(n*log(n))

Extra credit: For a list that is already sorted, insertion sort is the most efficient with linear running time O(n).
If an array is already in sorted order, and bubble sort makes no swaps, the algorithm can terminate after one pass.
With this modification, if bubble sort encounters a list that is already sorted, it will finish in O(n) time.










